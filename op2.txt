this is not gonna be your averageback-end developer roadmap i'm not gonnatell you to learn python node.js javaruby any of that stuff we will befocusing more on the broadertechnologies and the tech stack youshould know and figure out if there areany gaps in your knowledge if youalready are a back-end developer or whatareas you should focus on if you'retrying to become one also if you're newhere make sure you leave a like andsubscribe to the channel hit the bellicon to receive daily updates from codedam for tech web development and morelet's go this video is a part of codedam's t-shirt giveaway program for themonth if you want to take part and winan amazing go damn t-shirt all you haveto do is leave a comment on this videoabout what you think and that's it youare eligible if your comment gets aheart from code damn you will win at-shirt for absolutely free all rightlet's start with the list of veryimportant topics which as a back-enddeveloper you should absolutelyabsolutely know the first one whichprobably nobody expects is http not aprogramming language not a database nota cloud service nothing but actuallythrough http if i give you a notepad canyou write a simple get request withoutactually taking a look at how it works imean in a network inspector so if youhave a simple notepad or not evennotepad if i give you a callcli tool and tell youyou send a raw http requestor using curl or using netcat or anycertain tool can you do that if you cani mean i'm not telling you to rememberthe syntax but i'm actually telling youthat do you even know how to write anhttp request if not then probablychances are you probably don'tunderstand the http protocol and what doi mean by that in terms of notunderstanding what is a method rightwhat is the status code what are headersin a request how does the body work andhow is body different from headers soyou should at least have some level ofsemantic understanding of these topicsright that is when you would be able tosay that you understand http protocolhypertext transfer protocol which is aplain text protocol so you should beable to know these differences and whatall these are as a back-end developerwhat are the content types for exampleif you are receiving content on thebackend is it url encoded is it jsonit's json type is it multi-part is itlike you know you're uploading a filethen you need some that sort of contenttype so these things you should be ableto understand in terms of how they worknot only on a syntax level but on a somesort of technical level as well as aback-end developer the second topicwhich comes to my mind is pretty closeto http which we discussed which is therest right the rest architecture which ithink we have already covered a bunch oftimes i mean in a bunch of videos ongraphql versus rest and i think in theprevious video as well a bit sorest architecture just states these fewthings status codes and using thecorrect method name for example and howto create these rest apis at the backend so you should be familiar with thesemethods like put patch delete and what'stheir use case and when you should usethem and so on right similarly if youwant this is again this is an optionaltechnologies which is slash graphqlright which is technically not analternative of rest but i mean it's it'spretty close right if you just startyour backend and graphql you don'treally need to care about these putpatch posts all the stuff you only haveto care about the schema and how yourdata is validated so that is alsosomething you should consider as aback-end developer then of course thirdthing which comes to my mind is aprogramming language right and htmldoesn't cut here unfortunately this hasto be a turing complete language whichyou can run on a server right soobviously i'm not here to promotenode.js or python or any other languageyou can pick up any language you wantthere are so many in the market at themoment rastnor python every singlelanguage works right there is no badpopular language if a language ispopular it is probably has some good usecases pick up a language and try toconnect your language basics to the httpprotocol right writing a hello worldprogram in node.js or a print program inpython or hello world in rust is notgoing to teach you how to create httpservers that is a whole another gamebecause writing http servers essentiallymeans opening sockets on your operatingsystem right so you need to have a bitof networking knowledge as well whichbrings me to my next point which is toactually know about networking and linuxfundamentals which actually comesnetworking comes under linuxfundamentals itself but you should beaware about networking and linuxfundamentals as a back-end developerbecause not only you would be workingwith the http protocol but in fact youwill be going three levels down to layerfour which is tcp protocol right and atthis point you would actually becommunicating with databases as wellwhich have their own custom protocolsand stuff like this so you need tounderstand how networking works what istcp what is http what are thedifferences between two till certainextent i mean not not research levelknowledge but definitely operatingsystem level knowledge which allows youto understand what this stuff is then ofcourse the next thing which comes to mymind is obviously some sort of databasethat could be a sequel that could be anosql database that does not matterinitially very much because what youwould see is that nosql and sql bothfollow a lot of common patterns tell alot of extent right for example indexingindexing is basically a concept whichyou have to understand irrespective ofthe database you choose right caching isanother topic which you shouldunderstand as a back-end developer whycaching is required why disks areexpensive than ram why networks areexpensive than ram and so on and soforth sounderstanding about databasesunderstanding about caching again not tomention any technology you can use redismemcache pretty much any technology youwant but really understand how theseservices work because as a developerwhen the time comes it will not beabsolutely clear to you which technologyyou need to use it will only be clear ifyou know about the solution space whatexists out there and what you can usefalling on redis and memcache you wouldoften see that you are using somethingknown as elasti cache on aws for radiusand stuff so again not to stick to anyparticular technology i would say learnabout cloud providers whether this isgoogle cloud whether this is azurewhether this is aws pick any one whichgives you maximum free credits or youcan jump between them as well but iwould say just pick anyone and try toembed yourself into that ecosystem rightthis embedding inside of ecosystem isimportant because fortunately orunfortunately a bunch of them do havesome proprietary technologies whichresults in a vendor lock-in but alsohelps you do a lot of things fasterright so you do want to have thatespecially at a smaller stage it's fineit's okay to be vendor locked in butyeah i mean i would say like especiallywhen you're learning try to use thesecloud provider services at scale forexample s3 s3s i would say s3 is verywell a window lock in solution becausethey don't charge you anything foruploading to it but they have massivedata transfer charges if you aredownloading from s3 so things like theseright so this is fine if you're doing itat a small scale but you might want toreconsider or you know just just seewhat you want to do if you are having alot of data transfer right so but anywaythe bigger point here is that you shouldpick a cloud provider and try to explorewhat all is possible right so instead ofusing redis on ec2 and managing yourselftry to use a managed service instead ofusing a nat gateway on an ec2 try to usea managed snap-on maybe not because natsare ridiculously expensive on aws butfor other services like s3 it makessense to try these services out numbereight and probably the most importantthing whichmost people never mention is websecurity and i've made a video on this afew days back on top five things youshould consider when you're doing websecurity and web security is like themost important thing i would say likeeven if you skip cloud providers even ifyou skip caching even if you skip dbeven if you skip all this knowledgewhich kind of is lame because that willbe a prerequisite for web security thisis the rockstar if you are creating avulnerable server or if you are creatinga vulnerable application you just puteverything at risk right whatever you'redoing especially the database layerbecause code layer is not so fancy rightthe actual data which the user data isthe user stuff is that is the valueright anyone can code pretty much i meantoday in today's time if you give abunch of computer science engineers froma college graduate to recreate facebookthey could do that but the data whichfacebook has that has value and ifyou're writing bad code at anapplication layer that what we discussedin that video if you're writing a badcode on the business layer the logiclayeryou pretty much are writing bad code forthe world which enables you for allsorts of attacks and data leaks andstuff i mean this gets messy so youdon't want to be writing sql injectionsand you know that sort of code so makesure you spend a lot of time on websecurity and stuff and understand howand what are the common practices andbest practices in web security i wouldprobably put number nine and number 10in optional so you can learn it if youwant containerization and number 10testing well you can say they areoptional maybe notmaybe you are someone who thinks thattesting is super important i do feelthat is important but i mean you can youknow just live a little without testingand containerization as well they'llcertain extent so these are morehigh-level production practices but yeahi mean for containerization again not tomention any technologies but kubernetesis an overkill for most things i believehonestly docker is beautiful you can usedocker for containerization for testingi would say pretty much this usual thestandard stuff right for back end youcould probably spin up a jestconfiguration with some api testing oryou know postman based testing as wellsome people do thati don't i mean i don't have a lot ofexperience with postman but yeah i meanyou can play around with these twotechnologies but the crux the meat ofthe thingare these rest of the eight things whichare super important i think as aback-end developer so these were top 10broader topics i believe are superimportant for you as a back-enddeveloper and if you're missing out onany of these areas at the moment i wouldsay like take out some time and figureout what that area is and try to learnon that learn more about that so that isall for this video if you liked it makesure you leave a like subscribe to thechannel do the comment you know thedrill so that is all for this one i'mgonna see you in the next video reallysoon[Music][Music]this is not gonna be your average back-end developer roadmap i'm not gonna tell you to learn python node.js java ruby any of that stuff we will be focusing more on the broader technologies and the tech stack you should know and figure out if there are any gaps in your knowledge if you already are a back-end developer or what areas you should focus on if you're trying to become one also if you're new here make sure you leave a like and subscribe to the channel hit the bell icon to receive daily updates from code dam for tech web development and more let's go this video is a part of code dam's t-shirt giveaway program for the month if you want to take part and win an amazing go damn t-shirt all you have to do is leave a comment on this video about what you think and that's it you are eligible if your comment gets a heart from code damn you will win a t-shirt for absolutely free all right let's start with the list of very important topics which as a back-end developer you should absolutely absolutely know the first one which probably nobody expects is http not a programming language not a database not a cloud service nothing but actually through http if i give you a notepad can you write a simple get request without actually taking a look at how it works i mean in a network inspector so if you have a simple notepad or not even notepad if i give you a call cli tool and tell you you send a raw http request or using curl or using netcat or any certain tool can you do that if you can i mean i'm not telling you to remember the syntax but i'm actually telling you that do you even know how to write an http request if not then probably chances are you probably don't understand the http protocol and what do i mean by that in terms of not understanding what is a method right what is the status code what are headers in a request how does the body work and how is body different from headers so you should at least have some level of semantic understanding of these topics right that is when you would be able to say that you understand http protocol hypertext transfer protocol which is a plain text protocol so you should be able to know these differences and what all these are as a back-end developer what are the content types for example if you are receiving content on the backend is it url encoded is it json it's json type is it multi-part is it like you know you're uploading a file then you need some that sort of content type so these things you should be able to understand in terms of how they work not only on a syntax level but on a some sort of technical level as well as a back-end developer the second topic which comes to my mind is pretty close to http which we discussed which is the rest right the rest architecture which i think we have already covered a bunch of times i mean in a bunch of videos on graphql versus rest and i think in the previous video as well a bit so rest architecture just states these few things status codes and using the correct method name for example and how to create these rest apis at the back end so you should be familiar with these methods like put patch delete and what's their use case and when you should use them and so on right similarly if you want this is again this is an optional technologies which is slash graphql right which is technically not an alternative of rest but i mean it's it's pretty close right if you just start your backend and graphql you don't really need to care about these put patch posts all the stuff you only have to care about the schema and how your data is validated so that is also something you should consider as a back-end developer then of course third thing which comes to my mind is a programming language right and html doesn't cut here unfortunately this has to be a turing complete language which you can run on a server right so obviously i'm not here to promote node.js or python or any other language you can pick up any language you want there are so many in the market at the moment rastnor python every single language works right there is no bad popular language if a language is popular it is probably has some good use cases pick up a language and try to connect your language basics to the http protocol right writing a hello world program in node.js or a print program in python or hello world in rust is not going to teach you how to create http servers that is a whole another game because writing http servers essentially means opening sockets on your operating system right so you need to have a bit of networking knowledge as well which brings me to my next point which is to actually know about networking and linux fundamentals which actually comes networking comes under linux fundamentals itself but you should be aware about networking and linux fundamentals as a back-end developer because not only you would be working with the http protocol but in fact you will be going three levels down to layer four which is tcp protocol right and at this point you would actually be communicating with databases as well which have their own custom protocols and stuff like this so you need to understand how networking works what is tcp what is http what are the differences between two till certain extent i mean not not research level knowledge but definitely operating system level knowledge which allows you to understand what this stuff is then of course the next thing which comes to my mind is obviously some sort of database that could be a sequel that could be a nosql database that does not matter initially very much because what you would see is that nosql and sql both follow a lot of common patterns tell a lot of extent right for example indexing indexing is basically a concept which you have to understand irrespective of the database you choose right caching is another topic which you should understand as a back-end developer why caching is required why disks are expensive than ram why networks are expensive than ram and so on and so forth so understanding about databases understanding about caching again not to mention any technology you can use redis memcache pretty much any technology you want but really understand how these services work because as a developer when the time comes it will not be absolutely clear to you which technology you need to use it will only be clear if you know about the solution space what exists out there and what you can use falling on redis and memcache you would often see that you are using something known as elasti cache on aws for radius and stuff so again not to stick to any particular technology i would say learn about cloud providers whether this is google cloud whether this is azure whether this is aws pick any one which gives you maximum free credits or you can jump between them as well but i would say just pick anyone and try to embed yourself into that ecosystem right this embedding inside of ecosystem is important because fortunately or unfortunately a bunch of them do have some proprietary technologies which results in a vendor lock-in but also helps you do a lot of things faster right so you do want to have that especially at a smaller stage it's fine it's okay to be vendor locked in but yeah i mean i would say like especially when you're learning try to use these cloud provider services at scale for example s3 s3s i would say s3 is very well a window lock in solution because they don't charge you anything for uploading to it but they have massive data transfer charges if you are downloading from s3 so things like these right so this is fine if you're doing it at a small scale but you might want to reconsider or you know just just see what you want to do if you are having a lot of data transfer right so but anyway the bigger point here is that you should pick a cloud provider and try to explore what all is possible right so instead of using redis on ec2 and managing yourself try to use a managed service instead of using a nat gateway on an ec2 try to use a managed snap-on maybe not because nats are ridiculously expensive on aws but for other services like s3 it makes sense to try these services out number eight and probably the most important thing which most people never mention is web security and i've made a video on this a few days back on top five things you should consider when you're doing web security and web security is like the most important thing i would say like even if you skip cloud providers even if you skip caching even if you skip db even if you skip all this knowledge which kind of is lame because that will be a prerequisite for web security this is the rockstar if you are creating a vulnerable server or if you are creating a vulnerable application you just put everything at risk right whatever you're doing especially the database layer because code layer is not so fancy right the actual data which the user data is the user stuff is that is the value right anyone can code pretty much i mean today in today's time if you give a bunch of computer science engineers from a college graduate to recreate facebook they could do that but the data which facebook has that has value and if you're writing bad code at an application layer that what we discussed in that video if you're writing a bad code on the business layer the logic layer you pretty much are writing bad code for the world which enables you for all sorts of attacks and data leaks and stuff i mean this gets messy so you don't want to be writing sql injections and you know that sort of code so make sure you spend a lot of time on web security and stuff and understand how and what are the common practices and best practices in web security i would probably put number nine and number 10 in optional so you can learn it if you want containerization and number 10 testing well you can say they are optional maybe not maybe you are someone who thinks that testing is super important i do feel that is important but i mean you can you know just live a little without testing and containerization as well they'll certain extent so these are more high-level production practices but yeah i mean for containerization again not to mention any technologies but kubernetes is an overkill for most things i believe honestly docker is beautiful you can use docker for containerization for testing i would say pretty much this usual the standard stuff right for back end you could probably spin up a jest configuration with some api testing or you know postman based testing as well some people do that i don't i mean i don't have a lot of experience with postman but yeah i mean you can play around with these two technologies but the crux the meat of the thing are these rest of the eight things which are super important i think as a back-end developer so these were top 10 broader topics i believe are super important for you as a back-end developer and if you're missing out on any of these areas at the moment i would say like take out some time and figure out what that area is and try to learn on that learn more about that so that is all for this video if you liked it make sure you leave a like subscribe to the channel do the comment you know the drill so that is all for this one i'm gonna see you in the next video really soon [Music] [Music] this is not gonna be your average back-end developer roadmap i'm not gonna tell you to learn python node.js java ruby any of that stuff we will be focusing more on the broader technologies and the tech stack you should know and figure out if there are any gaps in your knowledge if you already are a back-end developer or what areas you should focus on if you're trying to become one also if you're new here make sure you leave a like and subscribe to the channel hit the bell icon to receive daily updates from code dam for tech web development and more let's go this video is a part of code dam's t-shirt giveaway program for the month if you want to take part and win an amazing go damn t-shirt all you have to do is leave a comment on this video about what you think and that's it you are eligible if your comment gets a heart from code damn you will win a t-shirt for absolutely free all right let's start with the list of very important topics which as a back-end developer you should absolutely absolutely know the first one which probably nobody expects is http not a programming language not a database not a cloud service nothing but actually through http if i give you a notepad can you write a simple get request without actually taking a look at how it works i mean in a network inspector so if you have a simple notepad or not even notepad if i give you a call cli tool and tell you you send a raw http request or using curl or using netcat or any certain tool can you do that if you can i mean i'm not telling you to remember the syntax but i'm actually telling you that do you even know how to write an http request if not then probably chances are you probably don't understand the http protocol and what do i mean by that in terms of not understanding what is a method right what is the status code what are headers in a request how does the body work and how is body different from headers so you should at least have some level of semantic understanding of these topics right that is when you would be able to say that you understand http protocol hypertext transfer protocol which is a plain text protocol so you should be able to know these differences and what all these are as a back-end developer what are the content types for example if you are receiving content on the backend is it url encoded is it json it's json type is it multi-part is it like you know you're uploading a file then you need some that sort of content type so these things you should be able to understand in terms of how they work not only on a syntax level but on a some sort of technical level as well as a back-end developer the second topic which comes to my mind is pretty close to http which we discussed which is the rest right the rest architecture which i think we have already covered a bunch of times i mean in a bunch of videos on graphql versus rest and i think in the previous video as well a bit so rest architecture just states these few things status codes and using the correct method name for example and how to create these rest apis at the back end so you should be familiar with these methods like put patch delete and what's their use case and when you should use them and so on right similarly if you want this is again this is an optional technologies which is slash graphql right which is technically not an alternative of rest but i mean it's it's pretty close right if you just start your backend and graphql you don't really need to care about these put patch posts all the stuff you only have to care about the schema and how your data is validated so that is also something you should consider as a back-end developer then of course third thing which comes to my mind is a programming language right and html doesn't cut here unfortunately this has to be a turing complete language which you can run on a server right so obviously i'm not here to promote node.js or python or any other language you can pick up any language you want there are so many in the market at the moment rastnor python every single language works right there is no bad popular language if a language is popular it is probably has some good use cases pick up a language and try to connect your language basics to the http protocol right writing a hello world program in node.js or a print program in python or hello world in rust is not going to teach you how to create http servers that is a whole another game because writing http servers essentially means opening sockets on your operating system right so you need to have a bit of networking knowledge as well which brings me to my next point which is to actually know about networking and linux fundamentals which actually comes networking comes under linux fundamentals itself but you should be aware about networking and linux fundamentals as a back-end developer because not only you would be working with the http protocol but in fact you will be going three levels down to layer four which is tcp protocol right and at this point you would actually be communicating with databases as well which have their own custom protocols and stuff like this so you need to understand how networking works what is tcp what is http what are the differences between two till certain extent i mean not not research level knowledge but definitely operating system level knowledge which allows you to understand what this stuff is then of course the next thing which comes to my mind is obviously some sort of database that could be a sequel that could be a nosql database that does not matter initially very much because what you would see is that nosql and sql both follow a lot of common patterns tell a lot of extent right for example indexing indexing is basically a concept which you have to understand irrespective of the database you choose right caching is another topic which you should understand as a back-end developer why caching is required why disks are expensive than ram why networks are expensive than ram and so on and so forth so understanding about databases understanding about caching again not to mention any technology you can use redis memcache pretty much any technology you want but really understand how these services work because as a developer when the time comes it will not be absolutely clear to you which technology you need to use it will only be clear if you know about the solution space what exists out there and what you can use falling on redis and memcache you would often see that you are using something known as elasti cache on aws for radius and stuff so again not to stick to any particular technology i would say learn about cloud providers whether this is google cloud whether this is azure whether this is aws pick any one which gives you maximum free credits or you can jump between them as well but i would say just pick anyone and try to embed yourself into that ecosystem right this embedding inside of ecosystem is important because fortunately or unfortunately a bunch of them do have some proprietary technologies which results in a vendor lock-in but also helps you do a lot of things faster right so you do want to have that especially at a smaller stage it's fine it's okay to be vendor locked in but yeah i mean i would say like especially when you're learning try to use these cloud provider services at scale for example s3 s3s i would say s3 is very well a window lock in solution because they don't charge you anything for uploading to it but they have massive data transfer charges if you are downloading from s3 so things like these right so this is fine if you're doing it at a small scale but you might want to reconsider or you know just just see what you want to do if you are having a lot of data transfer right so but anyway the bigger point here is that you should pick a cloud provider and try to explore what all is possible right so instead of using redis on ec2 and managing yourself try to use a managed service instead of using a nat gateway on an ec2 try to use a managed snap-on maybe not because nats are ridiculously expensive on aws but for other services like s3 it makes sense to try these services out number eight and probably the most important thing which most people never mention is web security and i've made a video on this a few days back on top five things you should consider when you're doing web security and web security is like the most important thing i would say like even if you skip cloud providers even if you skip caching even if you skip db even if you skip all this knowledge which kind of is lame because that will be a prerequisite for web security this is the rockstar if you are creating a vulnerable server or if you are creating a vulnerable application you just put everything at risk right whatever you're doing especially the database layer because code layer is not so fancy right the actual data which the user data is the user stuff is that is the value right anyone can code pretty much i mean today in today's time if you give a bunch of computer science engineers from a college graduate to recreate facebook they could do that but the data which facebook has that has value and if you're writing bad code at an application layer that what we discussed in that video if you're writing a bad code on the business layer the logic layer you pretty much are writing bad code for the world which enables you for all sorts of attacks and data leaks and stuff i mean this gets messy so you don't want to be writing sql injections and you know that sort of code so make sure you spend a lot of time on web security and stuff and understand how and what are the common practices and best practices in web security i would probably put number nine and number 10 in optional so you can learn it if you want containerization and number 10 testing well you can say they are optional maybe not maybe you are someone who thinks that testing is super important i do feel that is important but i mean you can you know just live a little without testing and containerization as well they'll certain extent so these are more high-level production practices but yeah i mean for containerization again not to mention any technologies but kubernetes is an overkill for most things i believe honestly docker is beautiful you can use docker for containerization for testing i would say pretty much this usual the standard stuff right for back end you could probably spin up a jest configuration with some api testing or you know postman based testing as well some people do that i don't i mean i don't have a lot of experience with postman but yeah i mean you can play around with these two technologies but the crux the meat of the thing are these rest of the eight things which are super important i think as a back-end developer so these were top 10 broader topics i believe are super important for you as a back-end developer and if you're missing out on any of these areas at the moment i would say like take out some time and figure out what that area is and try to learn on that learn more about that so that is all for this video if you liked it make sure you leave a like subscribe to the channel do the comment you know the drill so that is all for this one i'm gonna see you in the next video really soon [Music] [Music] this is not gonna be your average back-end developer roadmap i'm not gonna tell you to learn python node.js java ruby any of that stuff we will be focusing more on the broader technologies and the tech stack you should know and figure out if there are any gaps in your knowledge if you already are a back-end developer or what areas you should focus on if you're trying to become one also if you're new here make sure you leave a like and subscribe to the channel hit the bell icon to receive daily updates from code dam for tech web development and more let's go this video is a part of code dam's t-shirt giveaway program for the month if you want to take part and win an amazing go damn t-shirt all you have to do is leave a comment on this video about what you think and that's it you are eligible if your comment gets a heart from code damn you will win a t-shirt for absolutely free all right let's start with the list of very important topics which as a back-end developer you should absolutely absolutely know the first one which probably nobody expects is http not a programming language not a database not a cloud service nothing but actually through http if i give you a notepad can you write a simple get request without actually taking a look at how it works i mean in a network inspector so if you have a simple notepad or not even notepad if i give you a call cli tool and tell you you send a raw http request or using curl or using netcat or any certain tool can you do that if you can i mean i'm not telling you to remember the syntax but i'm actually telling you that do you even know how to write an http request if not then probably chances are you probably don't understand the http protocol and what do i mean by that in terms of not understanding what is a method right what is the status code what are headers in a request how does the body work and how is body different from headers so you should at least have some level of semantic understanding of these topics right that is when you would be able to say that you understand http protocol hypertext transfer protocol which is a plain text protocol so you should be able to know these differences and what all these are as a back-end developer what are the content types for example if you are receiving content on the backend is it url encoded is it json it's json type is it multi-part is it like you know you're uploading a file then you need some that sort of content type so these things you should be able to understand in terms of how they work not only on a syntax level but on a some sort of technical level as well as a back-end developer the second topic which comes to my mind is pretty close to http which we discussed which is the rest right the rest architecture which i think we have already covered a bunch of times i mean in a bunch of videos on graphql versus rest and i think in the previous video as well a bit so rest architecture just states these few things status codes and using the correct method name for example and how to create these rest apis at the back end so you should be familiar with these methods like put patch delete and what's their use case and when you should use them and so on right similarly if you want this is again this is an optional technologies which is slash graphql right which is technically not an alternative of rest but i mean it's it's pretty close right if you just start your backend and graphql you don't really need to care about these put patch posts all the stuff you only have to care about the schema and how your data is validated so that is also something you should consider as a back-end developer then of course third thing which comes to my mind is a programming language right and html doesn't cut here unfortunately this has to be a turing complete language which you can run on a server right so obviously i'm not here to promote node.js or python or any other language you can pick up any language you want there are so many in the market at the moment rastnor python every single language works right there is no bad popular language if a language is popular it is probably has some good use cases pick up a language and try to connect your language basics to the http protocol right writing a hello world program in node.js or a print program in python or hello world in rust is not going to teach you how to create http servers that is a whole another game because writing http servers essentially means opening sockets on your operating system right so you need to have a bit of networking knowledge as well which brings me to my next point which is to actually know about networking and linux fundamentals which actually comes networking comes under linux fundamentals itself but you should be aware about networking and linux fundamentals as a back-end developer because not only you would be working with the http protocol but in fact you will be going three levels down to layer four which is tcp protocol right and at this point you would actually be communicating with databases as well which have their own custom protocols and stuff like this so you need to understand how networking works what is tcp what is http what are the differences between two till certain extent i mean not not research level knowledge but definitely operating system level knowledge which allows you to understand what this stuff is then of course the next thing which comes to my mind is obviously some sort of database that could be a sequel that could be a nosql database that does not matter initially very much because what you would see is that nosql and sql both follow a lot of common patterns tell a lot of extent right for example indexing indexing is basically a concept which you have to understand irrespective of the database you choose right caching is another topic which you should understand as a back-end developer why caching is required why disks are expensive than ram why networks are expensive than ram and so on and so forth so understanding about databases understanding about caching again not to mention any technology you can use redis memcache pretty much any technology you want but really understand how these services work because as a developer when the time comes it will not be absolutely clear to you which technology you need to use it will only be clear if you know about the solution space what exists out there and what you can use falling on redis and memcache you would often see that you are using something known as elasti cache on aws for radius and stuff so again not to stick to any particular technology i would say learn about cloud providers whether this is google cloud whether this is azure whether this is aws pick any one which gives you maximum free credits or you can jump between them as well but i would say just pick anyone and try to embed yourself into that ecosystem right this embedding inside of ecosystem is important because fortunately or unfortunately a bunch of them do have some proprietary technologies which results in a vendor lock-in but also helps you do a lot of things faster right so you do want to have that especially at a smaller stage it's fine it's okay to be vendor locked in but yeah i mean i would say like especially when you're learning try to use these cloud provider services at scale for example s3 s3s i would say s3 is very well a window lock in solution because they don't charge you anything for uploading to it but they have massive data transfer charges if you are downloading from s3 so things like these right so this is fine if you're doing it at a small scale but you might want to reconsider or you know just just see what you want to do if you are having a lot of data transfer right so but anyway the bigger point here is that you should pick a cloud provider and try to explore what all is possible right so instead of using redis on ec2 and managing yourself try to use a managed service instead of using a nat gateway on an ec2 try to use a managed snap-on maybe not because nats are ridiculously expensive on aws but for other services like s3 it makes sense to try these services out number eight and probably the most important thing which most people never mention is web security and i've made a video on this a few days back on top five things you should consider when you're doing web security and web security is like the most important thing i would say like even if you skip cloud providers even if you skip caching even if you skip db even if you skip all this knowledge which kind of is lame because that will be a prerequisite for web security this is the rockstar if you are creating a vulnerable server or if you are creating a vulnerable application you just put everything at risk right whatever you're doing especially the database layer because code layer is not so fancy right the actual data which the user data is the user stuff is that is the value right anyone can code pretty much i mean today in today's time if you give a bunch of computer science engineers from a college graduate to recreate facebook they could do that but the data which facebook has that has value and if you're writing bad code at an application layer that what we discussed in that video if you're writing a bad code on the business layer the logic layer you pretty much are writing bad code for the world which enables you for all sorts of attacks and data leaks and stuff i mean this gets messy so you don't want to be writing sql injections and you know that sort of code so make sure you spend a lot of time on web security and stuff and understand how and what are the common practices and best practices in web security i would probably put number nine and number 10 in optional so you can learn it if you want containerization and number 10 testing well you can say they are optional maybe not maybe you are someone who thinks that testing is super important i do feel that is important but i mean you can you know just live a little without testing and containerization as well they'll certain extent so these are more high-level production practices but yeah i mean for containerization again not to mention any technologies but kubernetes is an overkill for most things i believe honestly docker is beautiful you can use docker for containerization for testing i would say pretty much this usual the standard stuff right for back end you could probably spin up a jest configuration with some api testing or you know postman based testing as well some people do that i don't i mean i don't have a lot of experience with postman but yeah i mean you can play around with these two technologies but the crux the meat of the thing are these rest of the eight things which are super important i think as a back-end developer so these were top 10 broader topics i believe are super important for you as a back-end developer and if you're missing out on any of these areas at the moment i would say like take out some time and figure out what that area is and try to learn on that learn more about that so that is all for this video if you liked it make sure you leave a like subscribe to the channel do the comment you know the drill so that is all for this one i'm gonna see you in the next video really soon [Music] [Music] this is not gonna be your average back-end developer roadmap i'm not gonna tell you to learn python node.js java ruby any of that stuff we will be focusing more on the broader technologies and the tech stack you should know and figure out if there are any gaps in your knowledge if you already are a back-end developer or what areas you should focus on if you're trying to become one also if you're new here make sure you leave a like and subscribe to the channel hit the bell icon to receive daily updates from code dam for tech web development and more let's go this video is a part of code dam's t-shirt giveaway program for the month if you want to take part and win an amazing go damn t-shirt all you have to do is leave a comment on this video about what you think and that's it you are eligible if your comment gets a heart from code damn you will win a t-shirt for absolutely free all right let's start with the list of very important topics which as a back-end developer you should absolutely absolutely know the first one which probably nobody expects is http not a programming language not a database not a cloud service nothing but actually through http if i give you a notepad can you write a simple get request without actually taking a look at how it works i mean in a network inspector so if you have a simple notepad or not even notepad if i give you a call cli tool and tell you you send a raw http request or using curl or using netcat or any certain tool can you do that if you can i mean i'm not telling you to remember the syntax but i'm actually telling you that do you even know how to write an http request if not then probably chances are you probably don't understand the http protocol and what do i mean by that in terms of not understanding what is a method right what is the status code what are headers in a request how does the body work and how is body different from headers so you should at least have some level of semantic understanding of these topics right that is when you would be able to say that you understand http protocol hypertext transfer protocol which is a plain text protocol so you should be able to know these differences and what all these are as a back-end developer what are the content types for example if you are receiving content on the backend is it url encoded is it json it's json type is it multi-part is it like you know you're uploading a file then you need some that sort of content type so these things you should be able to understand in terms of how they work not only on a syntax level but on a some sort of technical level as well as a back-end developer the second topic which comes to my mind is pretty close to http which we discussed which is the rest right the rest architecture which i think we have already covered a bunch of times i mean in a bunch of videos on graphql versus rest and i think in the previous video as well a bit so rest architecture just states these few things status codes and using the correct method name for example and how to create these rest apis at the back end so you should be familiar with these methods like put patch delete and what's their use case and when you should use them and so on right similarly if you want this is again this is an optional technologies which is slash graphql right which is technically not an alternative of rest but i mean it's it's pretty close right if you just start your backend and graphql you don't really need to care about these put patch posts all the stuff you only have to care about the schema and how your data is validated so that is also something you should consider as a back-end developer then of course third thing which comes to my mind is a programming language right and html doesn't cut here unfortunately this has to be a turing complete language which you can run on a server right so obviously i'm not here to promote node.js or python or any other language you can pick up any language you want there are so many in the market at the moment rastnor python every single language works right there is no bad popular language if a language is popular it is probably has some good use cases pick up a language and try to connect your language basics to the http protocol right writing a hello world program in node.js or a print program in python or hello world in rust is not going to teach you how to create http servers that is a whole another game because writing http servers essentially means opening sockets on your operating system right so you need to have a bit of networking knowledge as well which brings me to my next point which is to actually know about networking and linux fundamentals which actually comes networking comes under linux fundamentals itself but you should be aware about networking and linux fundamentals as a back-end developer because not only you would be working with the http protocol but in fact you will be going three levels down to layer four which is tcp protocol right and at this point you would actually be communicating with databases as well which have their own custom protocols and stuff like this so you need to understand how networking works what is tcp what is http what are the differences between two till certain extent i mean not not research level knowledge but definitely operating system level knowledge which allows you to understand what this stuff is then of course the next thing which comes to my mind is obviously some sort of database that could be a sequel that could be a nosql database that does not matter initially very much because what you would see is that nosql and sql both follow a lot of common patterns tell a lot of extent right for example indexing indexing is basically a concept which you have to understand irrespective of the database you choose right caching is another topic which you should understand as a back-end developer why caching is required why disks are expensive than ram why networks are expensive than ram and so on and so forth so understanding about databases understanding about caching again not to mention any technology you can use redis memcache pretty much any technology you want but really understand how these services work because as a developer when the time comes it will not be absolutely clear to you which technology you need to use it will only be clear if you know about the solution space what exists out there and what you can use falling on redis and memcache you would often see that you are using something known as elasti cache on aws for radius and stuff so again not to stick to any particular technology i would say learn about cloud providers whether this is google cloud whether this is azure whether this is aws pick any one which gives you maximum free credits or you can jump between them as well but i would say just pick anyone and try to embed yourself into that ecosystem right this embedding inside of ecosystem is important because fortunately or unfortunately a bunch of them do have some proprietary technologies which results in a vendor lock-in but also helps you do a lot of things faster right so you do want to have that especially at a smaller stage it's fine it's okay to be vendor locked in but yeah i mean i would say like especially when you're learning try to use these cloud provider services at scale for example s3 s3s i would say s3 is very well a window lock in solution because they don't charge you anything for uploading to it but they have massive data transfer charges if you are downloading from s3 so things like these right so this is fine if you're doing it at a small scale but you might want to reconsider or you know just just see what you want to do if you are having a lot of data transfer right so but anyway the bigger point here is that you should pick a cloud provider and try to explore what all is possible right so instead of using redis on ec2 and managing yourself try to use a managed service instead of using a nat gateway on an ec2 try to use a managed snap-on maybe not because nats are ridiculously expensive on aws but for other services like s3 it makes sense to try these services out number eight and probably the most important thing which most people never mention is web security and i've made a video on this a few days back on top five things you should consider when you're doing web security and web security is like the most important thing i would say like even if you skip cloud providers even if you skip caching even if you skip db even if you skip all this knowledge which kind of is lame because that will be a prerequisite for web security this is the rockstar if you are creating a vulnerable server or if you are creating a vulnerable application you just put everything at risk right whatever you're doing especially the database layer because code layer is not so fancy right the actual data which the user data is the user stuff is that is the value right anyone can code pretty much i mean today in today's time if you give a bunch of computer science engineers from a college graduate to recreate facebook they could do that but the data which facebook has that has value and if you're writing bad code at an application layer that what we discussed in that video if you're writing a bad code on the business layer the logic layer you pretty much are writing bad code for the world which enables you for all sorts of attacks and data leaks and stuff i mean this gets messy so you don't want to be writing sql injections and you know that sort of code so make sure you spend a lot of time on web security and stuff and understand how and what are the common practices and best practices in web security i would probably put number nine and number 10 in optional so you can learn it if you want containerization and number 10 testing well you can say they are optional maybe not maybe you are someone who thinks that testing is super important i do feel that is important but i mean you can you know just live a little without testing and containerization as well they'll certain extent so these are more high-level production practices but yeah i mean for containerization again not to mention any technologies but kubernetes is an overkill for most things i believe honestly docker is beautiful you can use docker for containerization for testing i would say pretty much this usual the standard stuff right for back end you could probably spin up a jest configuration with some api testing or you know postman based testing as well some people do that i don't i mean i don't have a lot of experience with postman but yeah i mean you can play around with these two technologies but the crux the meat of the thing are these rest of the eight things which are super important i think as a back-end developer so these were top 10 broader topics i believe are super important for you as a back-end developer and if you're missing out on any of these areas at the moment i would say like take out some time and figure out what that area is and try to learn on that learn more about that so that is all for this video if you liked it make sure you leave a like subscribe to the channel do the comment you know the drill so that is all for this one i'm gonna see you in the next video really soon [Music] [Music] [Music] 
